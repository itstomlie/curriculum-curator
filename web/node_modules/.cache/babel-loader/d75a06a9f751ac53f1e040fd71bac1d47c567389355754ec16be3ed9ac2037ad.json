{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\nexport const workflowApi = {\n  // List all workflows\n  listWorkflows: () => api.get('/api/workflows').then(response => response.data),\n  // Run a workflow\n  runWorkflow: request => api.post('/api/workflows/run', request).then(response => response.data),\n  // Get workflow session\n  getWorkflowSession: sessionId => api.get(`/api/workflows/sessions/${sessionId}`).then(response => response.data),\n  // List all workflow sessions\n  listWorkflowSessions: () => api.get('/api/workflows/sessions').then(response => response.data)\n};\nexport const promptApi = {\n  // List prompts\n  listPrompts: tag => {\n    const params = tag ? {\n      tag\n    } : {};\n    return api.get('/api/prompts', {\n      params\n    }).then(response => response.data);\n  }\n};\nexport const validatorApi = {\n  // List validators\n  listValidators: () => api.get('/api/validators').then(response => response.data)\n};\nexport const remediatorApi = {\n  // List remediators\n  listRemediators: () => api.get('/api/remediators').then(response => response.data)\n};\nexport const healthApi = {\n  // Health check\n  checkHealth: () => api.get('/health').then(response => response.data)\n};","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","workflowApi","listWorkflows","get","then","response","data","runWorkflow","request","post","getWorkflowSession","sessionId","listWorkflowSessions","promptApi","listPrompts","tag","params","validatorApi","listValidators","remediatorApi","listRemediators","healthApi","checkHealth"],"sources":["/home/michael/projects/curriculum-curator/web/src/services/api.ts"],"sourcesContent":["import axios from 'axios';\nimport {\n  WorkflowSession,\n  WorkflowRunRequest,\n  WorkflowRunResponse,\n  WorkflowListResponse,\n  ValidatorInfo,\n  RemediatorInfo,\n  PromptListResponse,\n} from '../types';\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\nexport const workflowApi = {\n  // List all workflows\n  listWorkflows: (): Promise<WorkflowListResponse> =>\n    api.get('/api/workflows').then(response => response.data),\n\n  // Run a workflow\n  runWorkflow: (request: WorkflowRunRequest): Promise<WorkflowRunResponse> =>\n    api.post('/api/workflows/run', request).then(response => response.data),\n\n  // Get workflow session\n  getWorkflowSession: (sessionId: string): Promise<WorkflowSession> =>\n    api.get(`/api/workflows/sessions/${sessionId}`).then(response => response.data),\n\n  // List all workflow sessions\n  listWorkflowSessions: (): Promise<WorkflowSession[]> =>\n    api.get('/api/workflows/sessions').then(response => response.data),\n};\n\nexport const promptApi = {\n  // List prompts\n  listPrompts: (tag?: string): Promise<PromptListResponse> => {\n    const params = tag ? { tag } : {};\n    return api.get('/api/prompts', { params }).then(response => response.data);\n  },\n};\n\nexport const validatorApi = {\n  // List validators\n  listValidators: (): Promise<Record<string, ValidatorInfo[]>> =>\n    api.get('/api/validators').then(response => response.data),\n};\n\nexport const remediatorApi = {\n  // List remediators\n  listRemediators: (): Promise<Record<string, RemediatorInfo[]>> =>\n    api.get('/api/remediators').then(response => response.data),\n};\n\nexport const healthApi = {\n  // Health check\n  checkHealth: (): Promise<{ status: string; message: string }> =>\n    api.get('/health').then(response => response.data),\n};"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAWzB,MAAMC,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,uBAAuB;AAE7E,MAAMC,GAAG,GAAGL,KAAK,CAACM,MAAM,CAAC;EACvBC,OAAO,EAAEN,YAAY;EACrBO,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;AAEF,OAAO,MAAMC,WAAW,GAAG;EACzB;EACAC,aAAa,EAAEA,CAAA,KACbL,GAAG,CAACM,GAAG,CAAC,gBAAgB,CAAC,CAACC,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC;EAE3D;EACAC,WAAW,EAAGC,OAA2B,IACvCX,GAAG,CAACY,IAAI,CAAC,oBAAoB,EAAED,OAAO,CAAC,CAACJ,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC;EAEzE;EACAI,kBAAkB,EAAGC,SAAiB,IACpCd,GAAG,CAACM,GAAG,CAAC,2BAA2BQ,SAAS,EAAE,CAAC,CAACP,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC;EAEjF;EACAM,oBAAoB,EAAEA,CAAA,KACpBf,GAAG,CAACM,GAAG,CAAC,yBAAyB,CAAC,CAACC,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI;AACrE,CAAC;AAED,OAAO,MAAMO,SAAS,GAAG;EACvB;EACAC,WAAW,EAAGC,GAAY,IAAkC;IAC1D,MAAMC,MAAM,GAAGD,GAAG,GAAG;MAAEA;IAAI,CAAC,GAAG,CAAC,CAAC;IACjC,OAAOlB,GAAG,CAACM,GAAG,CAAC,cAAc,EAAE;MAAEa;IAAO,CAAC,CAAC,CAACZ,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC;EAC5E;AACF,CAAC;AAED,OAAO,MAAMW,YAAY,GAAG;EAC1B;EACAC,cAAc,EAAEA,CAAA,KACdrB,GAAG,CAACM,GAAG,CAAC,iBAAiB,CAAC,CAACC,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI;AAC7D,CAAC;AAED,OAAO,MAAMa,aAAa,GAAG;EAC3B;EACAC,eAAe,EAAEA,CAAA,KACfvB,GAAG,CAACM,GAAG,CAAC,kBAAkB,CAAC,CAACC,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI;AAC9D,CAAC;AAED,OAAO,MAAMe,SAAS,GAAG;EACvB;EACAC,WAAW,EAAEA,CAAA,KACXzB,GAAG,CAACM,GAAG,CAAC,SAAS,CAAC,CAACC,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI;AACrD,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}