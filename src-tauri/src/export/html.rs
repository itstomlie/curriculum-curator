use super::{ExportFormat, ExportOptions, ExportResult, FormatConverter, BrandingOptions};
use crate::content::GeneratedContent;
use anyhow::{Result, Context};
use std::fs;
use chrono::Utc;

pub struct HtmlConverter;

impl HtmlConverter {
    pub fn new() -> Self {
        Self
    }

    fn content_to_html(&self, content: &GeneratedContent, template_name: Option<&str>, branding: Option<&BrandingOptions>) -> Result<String> {
        let template = self.get_template(template_name)?;
        let mut html = template.clone();

        // Apply branding customization
        if let Some(branding) = branding {
            html = self.apply_branding(&html, branding)?;
        }

        // Replace template variables
        html = html.replace("{{TITLE}}", &content.title);
        html = html.replace("{{CONTENT_TYPE}}", &self.format_content_type(&content.content_type));
        html = html.replace("{{GENERATED_AT}}", &Utc::now().format("%Y-%m-%d %H:%M:%S UTC").to_string());
        html = html.replace("{{DURATION}}", &content.metadata.estimated_duration);
        html = html.replace("{{DIFFICULTY}}", &content.metadata.difficulty_level);
        html = html.replace("{{WORD_COUNT}}", &content.metadata.word_count.to_string());
        html = html.replace("{{MAIN_CONTENT}}", &self.format_content_body(&content.content, &content.content_type)?);

        // Apply institution name if provided
        if let Some(branding) = branding {
            if let Some(institution) = &branding.institution_name {
                html = html.replace("Generated by Curriculum Curator", 
                    &format!("Generated by Curriculum Curator for {}", institution));
            }
        }

        Ok(html)
    }

    fn apply_branding(&self, html: &str, branding: &BrandingOptions) -> Result<String> {
        let mut branded_html = html.to_string();

        // Create CSS custom properties for branding
        let brand_css = format!(r#"
        :root {{
            --brand-primary: {};
            --brand-secondary: {};
            --brand-accent: {};
            --brand-heading-font: {};
            --brand-body-font: {};
        }}
        
        /* Apply branding to existing styles */
        body {{ font-family: var(--brand-body-font), -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; }}
        h1, h2, h3, h4, h5, h6 {{ font-family: var(--brand-heading-font), -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; }}
        .header {{ background: linear-gradient(135deg, var(--brand-primary) 0%, var(--brand-secondary) 100%); }}
        .metadata {{ border-left-color: var(--brand-primary); }}
        h3 {{ color: var(--brand-primary); }}
        a {{ color: var(--brand-primary); }}
        a:hover {{ color: var(--brand-accent); }}
        .content-type {{ background: var(--brand-accent); }}
        
        /* Logo styling if provided */
        {}"#, 
            branding.colors.primary,
            branding.colors.secondary,
            branding.colors.accent,
            branding.fonts.heading,
            branding.fonts.body,
            if branding.logo_path.is_some() {
                r#"
        .header::before {
            content: "";
            display: block;
            width: 60px;
            height: 60px;
            margin: 0 auto 1rem;
            background-image: url('{{LOGO_URL}}');
            background-size: contain;
            background-repeat: no-repeat;
            background-position: center;
        }"#
            } else { "" }
        );

        // Insert the branding CSS into the style tag
        if let Some(style_end) = branded_html.find("</style>") {
            branded_html.insert_str(style_end, &brand_css);
        }

        // Replace logo URL if provided
        if let Some(logo_path) = &branding.logo_path {
            // Convert absolute path to relative or data URI for web compatibility
            let logo_url = if logo_path.starts_with("data:") {
                logo_path.clone()
            } else {
                // For now, just use the path as-is. In a real implementation,
                // you might want to convert to base64 data URI or copy to output directory
                logo_path.clone()
            };
            branded_html = branded_html.replace("{{LOGO_URL}}", &logo_url);
        }

        Ok(branded_html)
    }

    fn get_template(&self, template_name: Option<&str>) -> Result<String> {
        match template_name {
            Some("professional") => Ok(self.get_professional_template()),
            Some("academic") => Ok(self.get_academic_template()),
            Some("minimal") => Ok(self.get_minimal_template()),
            Some("presentation") => Ok(self.get_presentation_template()),
            // New professional educational templates
            Some("university") => Ok(self.get_university_template()),
            Some("corporate") => Ok(self.get_corporate_template()),
            Some("k12") => Ok(self.get_k12_template()),
            Some("medical") => Ok(self.get_medical_template()),
            Some("stem") => Ok(self.get_stem_template()),
            Some("instructor") => Ok(self.get_instructor_template()),
            _ => Ok(self.get_default_template()),
        }
    }

    fn get_default_template(&self) -> String {
        r#"<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{TITLE}}</title>
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            line-height: 1.6;
            max-width: 800px;
            margin: 0 auto;
            padding: 2rem;
            color: #333;
            background-color: #fff;
        }
        .header {
            text-align: center;
            margin-bottom: 2rem;
            padding: 2rem;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border-radius: 12px;
        }
        .content-type {
            display: inline-block;
            background: rgba(255, 255, 255, 0.2);
            padding: 0.5rem 1rem;
            border-radius: 20px;
            font-size: 0.9rem;
            margin-bottom: 1rem;
        }
        .metadata {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            gap: 1rem;
            margin: 2rem 0;
            padding: 1.5rem;
            background: #f8fafc;
            border-radius: 8px;
            border-left: 4px solid #3b82f6;
        }
        .metadata-item {
            text-align: center;
        }
        .metadata-label {
            font-size: 0.8rem;
            color: #64748b;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }
        .metadata-value {
            font-size: 1.1rem;
            font-weight: 600;
            color: #1e293b;
            margin-top: 0.25rem;
        }
        .main-content {
            margin: 2rem 0;
        }
        h1, h2, h3, h4 {
            color: #1e293b;
        }
        h1 { font-size: 2.5rem; margin-bottom: 0.5rem; }
        h2 { font-size: 1.8rem; margin-top: 2rem; border-bottom: 2px solid #e2e8f0; padding-bottom: 0.5rem; }
        h3 { font-size: 1.4rem; margin-top: 1.5rem; color: #3b82f6; }
        h4 { font-size: 1.2rem; margin-top: 1rem; }
        .footer {
            text-align: center;
            margin-top: 3rem;
            padding: 1.5rem;
            background: #f1f5f9;
            border-radius: 8px;
            font-size: 0.9rem;
            color: #64748b;
        }
        @media print {
            body { max-width: none; padding: 1rem; }
            .header { background: #667eea !important; -webkit-print-color-adjust: exact; }
        }
    </style>
</head>
<body>
    <header class="header">
        <div class="content-type">{{CONTENT_TYPE}}</div>
        <h1>{{TITLE}}</h1>
    </header>

    <div class="metadata">
        <div class="metadata-item">
            <div class="metadata-label">Duration</div>
            <div class="metadata-value">{{DURATION}}</div>
        </div>
        <div class="metadata-item">
            <div class="metadata-label">Difficulty</div>
            <div class="metadata-value">{{DIFFICULTY}}</div>
        </div>
        <div class="metadata-item">
            <div class="metadata-label">Word Count</div>
            <div class="metadata-value">{{WORD_COUNT}} words</div>
        </div>
        <div class="metadata-item">
            <div class="metadata-label">Generated</div>
            <div class="metadata-value">{{GENERATED_AT}}</div>
        </div>
    </div>

    <main class="main-content">
        {{MAIN_CONTENT}}
    </main>

    <footer class="footer">
        Generated by Curriculum Curator • {{GENERATED_AT}}
    </footer>
</body>
</html>"#.to_string()
    }

    fn get_professional_template(&self) -> String {
        r#"<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{TITLE}}</title>
    <style>
        body {
            font-family: 'Georgia', 'Times New Roman', serif;
            line-height: 1.8;
            max-width: 900px;
            margin: 0 auto;
            padding: 3rem;
            color: #1a202c;
            background-color: #ffffff;
        }
        .header {
            border-bottom: 3px solid #2d3748;
            padding-bottom: 2rem;
            margin-bottom: 3rem;
        }
        .header h1 {
            font-size: 2.8rem;
            margin: 0;
            color: #2d3748;
            font-weight: 300;
        }
        .content-type {
            display: inline-block;
            background: #2d3748;
            color: white;
            padding: 0.75rem 1.5rem;
            font-size: 0.9rem;
            text-transform: uppercase;
            letter-spacing: 1px;
            margin-top: 1rem;
        }
        .metadata {
            display: flex;
            justify-content: space-between;
            margin: 2rem 0;
            padding: 2rem;
            background: #f7fafc;
            border: 1px solid #e2e8f0;
        }
        .metadata-item {
            text-align: center;
            flex: 1;
        }
        .metadata-label {
            font-size: 0.8rem;
            color: #718096;
            text-transform: uppercase;
            letter-spacing: 0.5px;
            margin-bottom: 0.5rem;
        }
        .metadata-value {
            font-size: 1.2rem;
            font-weight: 600;
            color: #2d3748;
        }
        .main-content {
            margin: 3rem 0;
            font-size: 1.1rem;
        }
        h2 {
            font-size: 2rem;
            color: #2d3748;
            margin-top: 2.5rem;
            margin-bottom: 1rem;
            font-weight: 400;
        }
        h3 {
            font-size: 1.5rem;
            color: #4a5568;
            margin-top: 2rem;
            margin-bottom: 0.75rem;
        }
        h4 {
            font-size: 1.25rem;
            color: #2d3748;
            margin-top: 1.5rem;
            margin-bottom: 0.5rem;
        }
        .footer {
            border-top: 1px solid #e2e8f0;
            padding-top: 2rem;
            margin-top: 4rem;
            text-align: center;
            font-size: 0.9rem;
            color: #718096;
        }
        @media print {
            body { padding: 2rem; }
            .header { page-break-after: avoid; }
        }
    </style>
</head>
<body>
    <header class="header">
        <h1>{{TITLE}}</h1>
        <div class="content-type">{{CONTENT_TYPE}}</div>
    </header>

    <div class="metadata">
        <div class="metadata-item">
            <div class="metadata-label">Duration</div>
            <div class="metadata-value">{{DURATION}}</div>
        </div>
        <div class="metadata-item">
            <div class="metadata-label">Difficulty Level</div>
            <div class="metadata-value">{{DIFFICULTY}}</div>
        </div>
        <div class="metadata-item">
            <div class="metadata-label">Content Length</div>
            <div class="metadata-value">{{WORD_COUNT}} words</div>
        </div>
    </div>

    <main class="main-content">
        {{MAIN_CONTENT}}
    </main>

    <footer class="footer">
        <p>Generated by Curriculum Curator on {{GENERATED_AT}}</p>
    </footer>
</body>
</html>"#.to_string()
    }

    fn get_academic_template(&self) -> String {
        r#"<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{TITLE}}</title>
    <style>
        body {
            font-family: 'Times New Roman', Times, serif;
            line-height: 1.6;
            max-width: 8.5in;
            margin: 0 auto;
            padding: 1in;
            color: #000;
            background-color: #fff;
            font-size: 12pt;
        }
        .header {
            text-align: center;
            margin-bottom: 2rem;
            border-bottom: 2px solid #000;
            padding-bottom: 1rem;
        }
        .header h1 {
            font-size: 18pt;
            margin: 0;
            text-transform: uppercase;
            letter-spacing: 1px;
        }
        .content-type {
            font-size: 10pt;
            margin-top: 0.5rem;
            font-style: italic;
        }
        .metadata {
            margin: 1.5rem 0;
            font-size: 10pt;
            line-height: 1.4;
        }
        .metadata table {
            width: 100%;
            border-collapse: collapse;
        }
        .metadata td {
            padding: 0.25rem 0.5rem;
            border: 1px solid #ccc;
        }
        .metadata .label {
            background: #f5f5f5;
            font-weight: bold;
            width: 25%;
        }
        .main-content {
            margin: 2rem 0;
        }
        h2 {
            font-size: 14pt;
            margin-top: 1.5rem;
            margin-bottom: 0.5rem;
            text-decoration: underline;
        }
        h3 {
            font-size: 12pt;
            margin-top: 1rem;
            margin-bottom: 0.5rem;
            font-weight: bold;
        }
        h4 {
            font-size: 12pt;
            margin-top: 0.75rem;
            margin-bottom: 0.25rem;
            font-style: italic;
        }
        .footer {
            margin-top: 2rem;
            padding-top: 1rem;
            border-top: 1px solid #ccc;
            font-size: 10pt;
            text-align: center;
        }
        @media print {
            body { margin: 0; padding: 0.5in; }
            .header, .footer { page-break-inside: avoid; }
        }
    </style>
</head>
<body>
    <header class="header">
        <h1>{{TITLE}}</h1>
        <div class="content-type">{{CONTENT_TYPE}}</div>
    </header>

    <div class="metadata">
        <table>
            <tr>
                <td class="label">Duration:</td>
                <td>{{DURATION}}</td>
                <td class="label">Difficulty:</td>
                <td>{{DIFFICULTY}}</td>
            </tr>
            <tr>
                <td class="label">Word Count:</td>
                <td>{{WORD_COUNT}} words</td>
                <td class="label">Generated:</td>
                <td>{{GENERATED_AT}}</td>
            </tr>
        </table>
    </div>

    <main class="main-content">
        {{MAIN_CONTENT}}
    </main>

    <footer class="footer">
        <p>Document generated by Curriculum Curator • {{GENERATED_AT}}</p>
    </footer>
</body>
</html>"#.to_string()
    }

    fn get_minimal_template(&self) -> String {
        r#"<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{TITLE}}</title>
    <style>
        body {
            font-family: system-ui, -apple-system, sans-serif;
            line-height: 1.5;
            max-width: 65ch;
            margin: 2rem auto;
            padding: 0 1rem;
            color: #333;
        }
        h1 { font-size: 2rem; margin-bottom: 0.5rem; }
        h2 { font-size: 1.5rem; margin-top: 2rem; }
        h3 { font-size: 1.25rem; margin-top: 1.5rem; }
        .meta { 
            font-size: 0.9rem; 
            color: #666; 
            margin-bottom: 2rem; 
            padding: 1rem; 
            background: #f9f9f9; 
            border-radius: 4px;
        }
        .meta span { margin-right: 1rem; }
        @media print { body { max-width: none; margin: 0; } }
    </style>
</head>
<body>
    <h1>{{TITLE}}</h1>
    <div class="meta">
        <span><strong>Type:</strong> {{CONTENT_TYPE}}</span>
        <span><strong>Duration:</strong> {{DURATION}}</span>
        <span><strong>Level:</strong> {{DIFFICULTY}}</span>
        <span><strong>Words:</strong> {{WORD_COUNT}}</span>
    </div>
    <main>{{MAIN_CONTENT}}</main>
</body>
</html>"#.to_string()
    }

    fn get_presentation_template(&self) -> String {
        r#"<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{TITLE}}</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            margin: 0;
            padding: 0;
            background: linear-gradient(135deg, #1e3c72 0%, #2a5298 100%);
            color: white;
            min-height: 100vh;
        }
        .slide {
            min-height: 100vh;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            padding: 2rem;
            text-align: center;
            page-break-after: always;
        }
        .slide-title {
            background: rgba(255, 255, 255, 0.95);
            color: #1e3c72;
            padding: 3rem;
            border-radius: 20px;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3);
            margin-bottom: 2rem;
        }
        .slide-title h1 {
            font-size: 3rem;
            margin: 0;
            font-weight: 300;
        }
        .content-type {
            font-size: 1.2rem;
            margin-top: 1rem;
            opacity: 0.8;
        }
        .metadata-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 1rem;
            margin-top: 2rem;
        }
        .metadata-card {
            background: rgba(255, 255, 255, 0.1);
            padding: 1.5rem;
            border-radius: 10px;
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.2);
        }
        .metadata-card h3 {
            margin: 0 0 0.5rem 0;
            font-size: 0.9rem;
            opacity: 0.8;
            text-transform: uppercase;
            letter-spacing: 1px;
        }
        .metadata-card p {
            margin: 0;
            font-size: 1.2rem;
            font-weight: 600;
        }
        .content-slide {
            background: white;
            color: #333;
            justify-content: flex-start;
            align-items: flex-start;
            text-align: left;
            padding: 3rem;
        }
        .content-slide h2 {
            color: #1e3c72;
            font-size: 2.5rem;
            margin-bottom: 2rem;
            text-align: center;
        }
        .content-slide h3 {
            color: #2a5298;
            font-size: 1.8rem;
            margin-top: 2rem;
        }
        @media print {
            .slide { min-height: 100vh; }
        }
    </style>
</head>
<body>
    <div class="slide">
        <div class="slide-title">
            <h1>{{TITLE}}</h1>
            <div class="content-type">{{CONTENT_TYPE}}</div>
        </div>
        <div class="metadata-grid">
            <div class="metadata-card">
                <h3>Duration</h3>
                <p>{{DURATION}}</p>
            </div>
            <div class="metadata-card">
                <h3>Difficulty</h3>
                <p>{{DIFFICULTY}}</p>
            </div>
            <div class="metadata-card">
                <h3>Content</h3>
                <p>{{WORD_COUNT}} words</p>
            </div>
        </div>
    </div>

    <div class="slide content-slide">
        <h2>Content</h2>
        {{MAIN_CONTENT}}
    </div>
</body>
</html>"#.to_string()
    }

    fn get_university_template(&self) -> String {
        r#"<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{TITLE}}</title>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Crimson+Text:ital,wght@0,400;0,600;1,400&family=Source+Sans+Pro:wght@300;400;600&display=swap');
        
        body {
            font-family: 'Crimson Text', Georgia, serif;
            line-height: 1.7;
            max-width: 900px;
            margin: 0 auto;
            padding: 2rem;
            color: #1a1a1a;
            background: #fafafa;
        }
        
        .university-header {
            text-align: center;
            padding: 3rem 2rem;
            background: linear-gradient(135deg, #8b1538 0%, #c41e3a 100%);
            color: white;
            margin: -2rem -2rem 3rem -2rem;
            position: relative;
            overflow: hidden;
        }
        
        .university-header::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><circle cx="50" cy="50" r="40" fill="none" stroke="white" stroke-width="0.5" opacity="0.1"/></svg>') repeat;
            background-size: 60px 60px;
        }
        
        .university-header h1 {
            font-size: 2.8rem;
            margin: 0 0 0.5rem 0;
            font-weight: 600;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
            position: relative;
            z-index: 1;
        }
        
        .institution-info {
            font-family: 'Source Sans Pro', sans-serif;
            font-size: 1rem;
            opacity: 0.9;
            position: relative;
            z-index: 1;
        }
        
        .content-badge {
            display: inline-block;
            background: rgba(255,255,255,0.2);
            padding: 0.5rem 1.5rem;
            border-radius: 25px;
            font-family: 'Source Sans Pro', sans-serif;
            font-size: 0.9rem;
            letter-spacing: 0.5px;
            margin-top: 1rem;
            position: relative;
            z-index: 1;
        }
        
        .course-metadata {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 1.5rem;
            margin: 3rem 0;
            padding: 2rem;
            background: white;
            border-radius: 12px;
            box-shadow: 0 4px 6px rgba(0,0,0,0.07);
            border-left: 5px solid #8b1538;
        }
        
        .metadata-card {
            text-align: center;
            padding: 1rem;
            border-radius: 8px;
            background: #f8f9fa;
        }
        
        .metadata-label {
            font-family: 'Source Sans Pro', sans-serif;
            font-size: 0.8rem;
            color: #6c757d;
            text-transform: uppercase;
            letter-spacing: 1px;
            margin-bottom: 0.5rem;
            font-weight: 600;
        }
        
        .metadata-value {
            font-size: 1.3rem;
            font-weight: 600;
            color: #8b1538;
        }
        
        .main-content {
            background: white;
            padding: 3rem;
            border-radius: 12px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.05);
            margin: 3rem 0;
        }
        
        h2 {
            font-size: 2.2rem;
            color: #8b1538;
            margin-top: 2.5rem;
            margin-bottom: 1rem;
            font-weight: 600;
            padding-bottom: 0.5rem;
            border-bottom: 2px solid #f8f9fa;
        }
        
        h3 {
            font-size: 1.6rem;
            color: #2c3e50;
            margin-top: 2rem;
            margin-bottom: 0.75rem;
            font-weight: 600;
        }
        
        h4 {
            font-size: 1.3rem;
            color: #495057;
            margin-top: 1.5rem;
            margin-bottom: 0.5rem;
            font-weight: 600;
        }
        
        .learning-objectives {
            background: #f8f9fa;
            padding: 2rem;
            border-radius: 8px;
            border-left: 4px solid #28a745;
            margin: 2rem 0;
        }
        
        .assessment-info {
            background: #fff3cd;
            padding: 2rem;
            border-radius: 8px;
            border-left: 4px solid #ffc107;
            margin: 2rem 0;
        }
        
        .footer {
            text-align: center;
            margin-top: 4rem;
            padding: 2rem;
            background: #8b1538;
            color: white;
            border-radius: 8px;
            font-family: 'Source Sans Pro', sans-serif;
            margin-left: -2rem;
            margin-right: -2rem;
        }
        
        @media print {
            body { background: white; padding: 1rem; }
            .university-header { background: #8b1538 !important; -webkit-print-color-adjust: exact; }
            .footer { background: #8b1538 !important; -webkit-print-color-adjust: exact; }
        }
    </style>
</head>
<body>
    <header class="university-header">
        <h1>{{TITLE}}</h1>
        <div class="institution-info">University Course Material</div>
        <div class="content-badge">{{CONTENT_TYPE}}</div>
    </header>

    <div class="course-metadata">
        <div class="metadata-card">
            <div class="metadata-label">Duration</div>
            <div class="metadata-value">{{DURATION}}</div>
        </div>
        <div class="metadata-card">
            <div class="metadata-label">Level</div>
            <div class="metadata-value">{{DIFFICULTY}}</div>
        </div>
        <div class="metadata-card">
            <div class="metadata-label">Content</div>
            <div class="metadata-value">{{WORD_COUNT}} words</div>
        </div>
        <div class="metadata-card">
            <div class="metadata-label">Generated</div>
            <div class="metadata-value">{{GENERATED_AT}}</div>
        </div>
    </div>

    <main class="main-content">
        {{MAIN_CONTENT}}
    </main>

    <footer class="footer">
        <p>Generated by Curriculum Curator • Academic Excellence Initiative • {{GENERATED_AT}}</p>
    </footer>
</body>
</html>"#.to_string()
    }

    fn get_corporate_template(&self) -> String {
        r#"<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{TITLE}}</title>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');
        
        body {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
            line-height: 1.6;
            max-width: 1000px;
            margin: 0 auto;
            padding: 0;
            color: #2d3748;
            background: #f7fafc;
        }
        
        .corporate-header {
            background: linear-gradient(135deg, #1a365d 0%, #2d3748 50%, #4a5568 100%);
            color: white;
            padding: 3rem 2rem;
            text-align: center;
            position: relative;
            overflow: hidden;
        }
        
        .corporate-header::before {
            content: '';
            position: absolute;
            top: -50%;
            left: -50%;
            width: 200%;
            height: 200%;
            background: repeating-linear-gradient(
                45deg,
                transparent,
                transparent 2px,
                rgba(255,255,255,0.03) 2px,
                rgba(255,255,255,0.03) 4px
            );
            animation: slide 20s linear infinite;
        }
        
        @keyframes slide {
            0% { transform: translate(-50%, -50%) rotate(0deg); }
            100% { transform: translate(-50%, -50%) rotate(360deg); }
        }
        
        .company-logo {
            width: 60px;
            height: 60px;
            background: rgba(255,255,255,0.1);
            border-radius: 12px;
            margin: 0 auto 1rem auto;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.5rem;
            font-weight: 700;
            position: relative;
            z-index: 1;
        }
        
        .corporate-header h1 {
            font-size: 2.5rem;
            margin: 0 0 0.5rem 0;
            font-weight: 600;
            position: relative;
            z-index: 1;
        }
        
        .training-type {
            font-size: 1rem;
            opacity: 0.9;
            font-weight: 500;
            position: relative;
            z-index: 1;
        }
        
        .content-badge {
            display: inline-block;
            background: rgba(255,255,255,0.15);
            padding: 0.75rem 1.5rem;
            border-radius: 30px;
            font-size: 0.9rem;
            letter-spacing: 0.5px;
            margin-top: 1rem;
            border: 1px solid rgba(255,255,255,0.2);
            position: relative;
            z-index: 1;
        }
        
        .metrics-dashboard {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(220px, 1fr));
            gap: 1.5rem;
            margin: 2rem;
            padding: 0;
        }
        
        .metric-card {
            background: white;
            padding: 2rem;
            border-radius: 12px;
            text-align: center;
            box-shadow: 0 4px 6px rgba(0,0,0,0.05);
            border: 1px solid #e2e8f0;
            transition: transform 0.2s ease, box-shadow 0.2s ease;
        }
        
        .metric-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 15px rgba(0,0,0,0.1);
        }
        
        .metric-icon {
            width: 50px;
            height: 50px;
            background: linear-gradient(135deg, #4299e1 0%, #3182ce 100%);
            border-radius: 50%;
            margin: 0 auto 1rem auto;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 1.2rem;
            font-weight: 600;
        }
        
        .metric-label {
            font-size: 0.8rem;
            color: #718096;
            text-transform: uppercase;
            letter-spacing: 1px;
            margin-bottom: 0.5rem;
            font-weight: 600;
        }
        
        .metric-value {
            font-size: 1.4rem;
            font-weight: 700;
            color: #1a365d;
        }
        
        .main-content {
            background: white;
            margin: 2rem;
            padding: 3rem;
            border-radius: 12px;
            box-shadow: 0 4px 6px rgba(0,0,0,0.05);
        }
        
        h2 {
            font-size: 2rem;
            color: #1a365d;
            margin-top: 2.5rem;
            margin-bottom: 1rem;
            font-weight: 600;
            padding-bottom: 0.5rem;
            border-bottom: 3px solid #e2e8f0;
        }
        
        h3 {
            font-size: 1.5rem;
            color: #2d3748;
            margin-top: 2rem;
            margin-bottom: 0.75rem;
            font-weight: 600;
        }
        
        h4 {
            font-size: 1.25rem;
            color: #4a5568;
            margin-top: 1.5rem;
            margin-bottom: 0.5rem;
            font-weight: 600;
        }
        
        .key-takeaways {
            background: #ebf8ff;
            padding: 2rem;
            border-radius: 8px;
            border-left: 4px solid #4299e1;
            margin: 2rem 0;
        }
        
        .action-items {
            background: #f0fff4;
            padding: 2rem;
            border-radius: 8px;
            border-left: 4px solid #48bb78;
            margin: 2rem 0;
        }
        
        .footer {
            background: #1a365d;
            color: white;
            text-align: center;
            padding: 2rem;
            margin: 2rem;
            border-radius: 12px;
            font-size: 0.9rem;
        }
        
        @media print {
            body { background: white; }
            .corporate-header { background: #1a365d !important; -webkit-print-color-adjust: exact; }
            .footer { background: #1a365d !important; -webkit-print-color-adjust: exact; }
        }
    </style>
</head>
<body>
    <header class="corporate-header">
        <div class="company-logo">CC</div>
        <h1>{{TITLE}}</h1>
        <div class="training-type">Professional Development Training</div>
        <div class="content-badge">{{CONTENT_TYPE}}</div>
    </header>

    <div class="metrics-dashboard">
        <div class="metric-card">
            <div class="metric-icon">⏱</div>
            <div class="metric-label">Duration</div>
            <div class="metric-value">{{DURATION}}</div>
        </div>
        <div class="metric-card">
            <div class="metric-icon">📊</div>
            <div class="metric-label">Complexity</div>
            <div class="metric-value">{{DIFFICULTY}}</div>
        </div>
        <div class="metric-card">
            <div class="metric-icon">📝</div>
            <div class="metric-label">Content</div>
            <div class="metric-value">{{WORD_COUNT}} words</div>
        </div>
        <div class="metric-card">
            <div class="metric-icon">📅</div>
            <div class="metric-label">Generated</div>
            <div class="metric-value">{{GENERATED_AT}}</div>
        </div>
    </div>

    <main class="main-content">
        {{MAIN_CONTENT}}
    </main>

    <footer class="footer">
        <p>Training Material Generated by Curriculum Curator • Professional Development Initiative • {{GENERATED_AT}}</p>
    </footer>
</body>
</html>"#.to_string()
    }

    fn get_k12_template(&self) -> String {
        r#"<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{TITLE}}</title>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Fredoka:wght@300;400;500;600&family=Comic+Neue:wght@300;400;700&display=swap');
        
        body {
            font-family: 'Comic Neue', 'Comic Sans MS', cursive;
            line-height: 1.6;
            max-width: 900px;
            margin: 0 auto;
            padding: 1rem;
            color: #2d3748;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 25%, #f093fb 50%, #f5576c 75%, #4facfe 100%);
            background-size: 400% 400%;
            animation: gradientShift 15s ease infinite;
            min-height: 100vh;
        }
        
        @keyframes gradientShift {
            0% { background-position: 0% 50%; }
            50% { background-position: 100% 50%; }
            100% { background-position: 0% 50%; }
        }
        
        .lesson-header {
            background: rgba(255, 255, 255, 0.95);
            border-radius: 20px;
            padding: 2rem;
            text-align: center;
            margin-bottom: 2rem;
            box-shadow: 0 8px 32px rgba(0,0,0,0.1);
            backdrop-filter: blur(10px);
            border: 2px solid rgba(255,255,255,0.3);
        }
        
        .lesson-header h1 {
            font-family: 'Fredoka', cursive;
            font-size: 2.5rem;
            margin: 0 0 1rem 0;
            background: linear-gradient(45deg, #ff6b6b, #4ecdc4, #45b7d1, #96ceb4);
            background-size: 300% 300%;
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            animation: textGradient 3s ease infinite;
            font-weight: 600;
        }
        
        @keyframes textGradient {
            0% { background-position: 0% 50%; }
            50% { background-position: 100% 50%; }
            100% { background-position: 0% 50%; }
        }
        
        .grade-level {
            display: inline-block;
            background: linear-gradient(45deg, #ff9a9e 0%, #fecfef 50%, #fecfef 100%);
            color: white;
            padding: 0.5rem 1.5rem;
            border-radius: 25px;
            font-family: 'Fredoka', cursive;
            font-weight: 500;
            font-size: 1rem;
            text-shadow: 1px 1px 2px rgba(0,0,0,0.2);
            margin-bottom: 1rem;
        }
        
        .content-type {
            font-size: 1.1rem;
            color: #4a5568;
            font-weight: 500;
        }
        
        .fun-stats {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(180px, 1fr));
            gap: 1rem;
            margin: 2rem 0;
        }
        
        .stat-bubble {
            background: rgba(255, 255, 255, 0.9);
            padding: 1.5rem;
            border-radius: 20px;
            text-align: center;
            box-shadow: 0 4px 20px rgba(0,0,0,0.1);
            border: 3px solid transparent;
            background-clip: padding-box;
            position: relative;
            overflow: hidden;
        }
        
        .stat-bubble::before {
            content: '';
            position: absolute;
            top: -2px;
            left: -2px;
            right: -2px;
            bottom: -2px;
            background: linear-gradient(45deg, #ff9a9e, #fecfef, #fecfef, #ff9a9e);
            border-radius: 20px;
            z-index: -1;
            animation: borderRotate 3s linear infinite;
        }
        
        @keyframes borderRotate {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        
        .stat-emoji {
            font-size: 2rem;
            margin-bottom: 0.5rem;
            display: block;
        }
        
        .stat-label {
            font-family: 'Fredoka', cursive;
            font-size: 0.8rem;
            color: #718096;
            text-transform: uppercase;
            letter-spacing: 1px;
            margin-bottom: 0.5rem;
            font-weight: 500;
        }
        
        .stat-value {
            font-family: 'Fredoka', cursive;
            font-size: 1.2rem;
            font-weight: 600;
            color: #2d3748;
        }
        
        .main-content {
            background: rgba(255, 255, 255, 0.95);
            padding: 2.5rem;
            border-radius: 20px;
            margin: 2rem 0;
            box-shadow: 0 8px 32px rgba(0,0,0,0.1);
            backdrop-filter: blur(10px);
        }
        
        h2 {
            font-family: 'Fredoka', cursive;
            font-size: 1.8rem;
            color: #4c51bf;
            margin-top: 2rem;
            margin-bottom: 1rem;
            font-weight: 600;
        }
        
        h3 {
            font-family: 'Fredoka', cursive;
            font-size: 1.4rem;
            color: #805ad5;
            margin-top: 1.5rem;
            margin-bottom: 0.75rem;
            font-weight: 500;
        }
        
        h4 {
            font-family: 'Fredoka', cursive;
            font-size: 1.2rem;
            color: #38b2ac;
            margin-top: 1rem;
            margin-bottom: 0.5rem;
            font-weight: 500;
        }
        
        .learning-goal {
            background: rgba(72, 187, 120, 0.1);
            padding: 1.5rem;
            border-radius: 15px;
            border-left: 5px solid #48bb78;
            margin: 1.5rem 0;
        }
        
        .fun-fact {
            background: rgba(246, 173, 85, 0.1);
            padding: 1.5rem;
            border-radius: 15px;
            border-left: 5px solid #f6ad55;
            margin: 1.5rem 0;
        }
        
        .footer {
            background: rgba(255, 255, 255, 0.9);
            text-align: center;
            padding: 1.5rem;
            border-radius: 20px;
            margin-top: 2rem;
            font-family: 'Fredoka', cursive;
            color: #4a5568;
            box-shadow: 0 4px 20px rgba(0,0,0,0.1);
        }
        
        @media print {
            body { 
                background: white !important; 
                animation: none !important;
            }
            .lesson-header h1 { 
                background: #4c51bf !important; 
                -webkit-text-fill-color: #4c51bf !important;
                animation: none !important;
            }
        }
    </style>
</head>
<body>
    <header class="lesson-header">
        <div class="grade-level">K-12 Learning Material</div>
        <h1>{{TITLE}}</h1>
        <div class="content-type">{{CONTENT_TYPE}}</div>
    </header>

    <div class="fun-stats">
        <div class="stat-bubble">
            <span class="stat-emoji">⏰</span>
            <div class="stat-label">Time Needed</div>
            <div class="stat-value">{{DURATION}}</div>
        </div>
        <div class="stat-bubble">
            <span class="stat-emoji">🎯</span>
            <div class="stat-label">Level</div>
            <div class="stat-value">{{DIFFICULTY}}</div>
        </div>
        <div class="stat-bubble">
            <span class="stat-emoji">📚</span>
            <div class="stat-label">Words</div>
            <div class="stat-value">{{WORD_COUNT}}</div>
        </div>
        <div class="stat-bubble">
            <span class="stat-emoji">✨</span>
            <div class="stat-label">Created</div>
            <div class="stat-value">{{GENERATED_AT}}</div>
        </div>
    </div>

    <main class="main-content">
        {{MAIN_CONTENT}}
    </main>

    <footer class="footer">
        <p>🌟 Created with Curriculum Curator for amazing learning! • {{GENERATED_AT}} 🌟</p>
    </footer>
</body>
</html>"#.to_string()
    }

    fn get_medical_template(&self) -> String {
        r#"<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{TITLE}}</title>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Source+Sans+Pro:wght@300;400;600;700&family=Source+Serif+Pro:wght@400;600&display=swap');
        
        body {
            font-family: 'Source Sans Pro', -apple-system, BlinkMacSystemFont, sans-serif;
            line-height: 1.7;
            max-width: 950px;
            margin: 0 auto;
            padding: 2rem;
            color: #2d3748;
            background: #f8fafc;
        }
        
        .medical-header {
            background: linear-gradient(135deg, #0066cc 0%, #004499 100%);
            color: white;
            padding: 3rem 2rem;
            text-align: center;
            border-radius: 8px;
            margin-bottom: 2rem;
            position: relative;
            overflow: hidden;
        }
        
        .medical-header::before {
            content: '+';
            position: absolute;
            font-size: 15rem;
            opacity: 0.05;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            font-weight: 300;
        }
        
        .medical-header h1 {
            font-family: 'Source Serif Pro', Georgia, serif;
            font-size: 2.5rem;
            margin: 0 0 0.5rem 0;
            font-weight: 600;
            position: relative;
            z-index: 1;
        }
        
        .specialty-badge {
            display: inline-block;
            background: rgba(255,255,255,0.15);
            padding: 0.5rem 1.5rem;
            border-radius: 4px;
            font-size: 0.9rem;
            letter-spacing: 0.5px;
            margin-top: 0.5rem;
            border: 1px solid rgba(255,255,255,0.2);
            position: relative;
            z-index: 1;
        }
        
        .content-classification {
            font-size: 1rem;
            opacity: 0.9;
            margin-top: 1rem;
            position: relative;
            z-index: 1;
        }
        
        .clinical-metadata {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(220px, 1fr));
            gap: 1.5rem;
            margin: 2rem 0;
        }
        
        .metadata-panel {
            background: white;
            padding: 1.5rem;
            border-radius: 8px;
            border-left: 4px solid #0066cc;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            text-align: center;
        }
        
        .metadata-icon {
            width: 40px;
            height: 40px;
            background: #e6f3ff;
            border-radius: 50%;
            margin: 0 auto 1rem auto;
            display: flex;
            align-items: center;
            justify-content: center;
            color: #0066cc;
            font-weight: 600;
        }
        
        .metadata-label {
            font-size: 0.8rem;
            color: #718096;
            text-transform: uppercase;
            letter-spacing: 0.5px;
            margin-bottom: 0.5rem;
            font-weight: 600;
        }
        
        .metadata-value {
            font-size: 1.2rem;
            font-weight: 600;
            color: #0066cc;
        }
        
        .main-content {
            background: white;
            padding: 3rem;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            margin: 2rem 0;
        }
        
        h2 {
            font-family: 'Source Serif Pro', Georgia, serif;
            font-size: 2rem;
            color: #0066cc;
            margin-top: 2.5rem;
            margin-bottom: 1rem;
            font-weight: 600;
            padding-bottom: 0.5rem;
            border-bottom: 2px solid #e6f3ff;
        }
        
        h3 {
            font-family: 'Source Serif Pro', Georgia, serif;
            font-size: 1.5rem;
            color: #2d3748;
            margin-top: 2rem;
            margin-bottom: 0.75rem;
            font-weight: 600;
        }
        
        h4 {
            font-size: 1.25rem;
            color: #4a5568;
            margin-top: 1.5rem;
            margin-bottom: 0.5rem;
            font-weight: 600;
        }
        
        .clinical-note {
            background: #f0f8ff;
            padding: 1.5rem;
            border-radius: 6px;
            border-left: 4px solid #0066cc;
            margin: 1.5rem 0;
        }
        
        .safety-warning {
            background: #fff5f5;
            padding: 1.5rem;
            border-radius: 6px;
            border-left: 4px solid #e53e3e;
            margin: 1.5rem 0;
        }
        
        .evidence-level {
            background: #f0fff4;
            padding: 1.5rem;
            border-radius: 6px;
            border-left: 4px solid #38a169;
            margin: 1.5rem 0;
        }
        
        .dosage-table {
            width: 100%;
            border-collapse: collapse;
            margin: 1.5rem 0;
            font-size: 0.9rem;
        }
        
        .dosage-table th,
        .dosage-table td {
            padding: 0.75rem;
            text-align: left;
            border-bottom: 1px solid #e2e8f0;
        }
        
        .dosage-table th {
            background: #f7fafc;
            font-weight: 600;
            color: #4a5568;
        }
        
        .footer {
            background: #0066cc;
            color: white;
            text-align: center;
            padding: 2rem;
            border-radius: 8px;
            margin-top: 3rem;
            font-size: 0.9rem;
        }
        
        .disclaimer {
            background: #fff8e1;
            padding: 1rem;
            border-radius: 6px;
            border: 1px solid #ffb300;
            margin: 2rem 0;
            font-size: 0.9rem;
            text-align: center;
            font-style: italic;
        }
        
        @media print {
            body { background: white; }
            .medical-header { background: #0066cc !important; -webkit-print-color-adjust: exact; }
            .footer { background: #0066cc !important; -webkit-print-color-adjust: exact; }
        }
    </style>
</head>
<body>
    <header class="medical-header">
        <h1>{{TITLE}}</h1>
        <div class="specialty-badge">Medical Education Content</div>
        <div class="content-classification">{{CONTENT_TYPE}}</div>
    </header>

    <div class="clinical-metadata">
        <div class="metadata-panel">
            <div class="metadata-icon">⏱</div>
            <div class="metadata-label">Duration</div>
            <div class="metadata-value">{{DURATION}}</div>
        </div>
        <div class="metadata-panel">
            <div class="metadata-icon">🎓</div>
            <div class="metadata-label">Level</div>
            <div class="metadata-value">{{DIFFICULTY}}</div>
        </div>
        <div class="metadata-panel">
            <div class="metadata-icon">📋</div>
            <div class="metadata-label">Content</div>
            <div class="metadata-value">{{WORD_COUNT}} words</div>
        </div>
        <div class="metadata-panel">
            <div class="metadata-icon">📅</div>
            <div class="metadata-label">Updated</div>
            <div class="metadata-value">{{GENERATED_AT}}</div>
        </div>
    </div>

    <div class="disclaimer">
        <strong>⚠️ EDUCATIONAL USE ONLY:</strong> This content is for educational purposes only and should not replace clinical judgment, established guidelines, or direct patient care protocols.
    </div>

    <main class="main-content">
        {{MAIN_CONTENT}}
    </main>

    <footer class="footer">
        <p>Medical Education Content Generated by Curriculum Curator • Always verify with current clinical guidelines • {{GENERATED_AT}}</p>
    </footer>
</body>
</html>"#.to_string()
    }

    fn get_stem_template(&self) -> String {
        r#"<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{TITLE}}</title>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=JetBrains+Mono:wght@300;400;500;700&family=Inter:wght@300;400;500;600;700&display=swap');
        
        body {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
            line-height: 1.6;
            max-width: 1000px;
            margin: 0 auto;
            padding: 1rem;
            color: #1a202c;
            background: #0f172a;
        }
        
        .stem-header {
            background: linear-gradient(135deg, #1e293b 0%, #0f172a 50%, #1e293b 100%);
            color: #f1f5f9;
            padding: 3rem 2rem;
            border-radius: 12px;
            text-align: center;
            margin-bottom: 2rem;
            border: 1px solid #334155;
            position: relative;
            overflow: hidden;
        }
        
        .stem-header::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-image: 
                radial-gradient(circle at 25% 25%, #22d3ee 0%, transparent 50%),
                radial-gradient(circle at 75% 75%, #a855f7 0%, transparent 50%),
                radial-gradient(circle at 75% 25%, #10b981 0%, transparent 50%),
                radial-gradient(circle at 25% 75%, #f59e0b 0%, transparent 50%);
            opacity: 0.1;
            animation: techGlow 8s ease-in-out infinite alternate;
        }
        
        @keyframes techGlow {
            0% { opacity: 0.1; filter: blur(20px); }
            100% { opacity: 0.2; filter: blur(30px); }
        }
        
        .stem-header h1 {
            font-size: 2.5rem;
            margin: 0 0 0.5rem 0;
            font-weight: 700;
            background: linear-gradient(45deg, #22d3ee, #a855f7, #10b981, #f59e0b);
            background-size: 300% 300%;
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            animation: gradientText 4s ease infinite;
            position: relative;
            z-index: 1;
        }
        
        @keyframes gradientText {
            0% { background-position: 0% 50%; }
            50% { background-position: 100% 50%; }
            100% { background-position: 0% 50%; }
        }
        
        .tech-badge {
            display: inline-block;
            background: rgba(34, 211, 238, 0.1);
            border: 1px solid rgba(34, 211, 238, 0.3);
            color: #22d3ee;
            padding: 0.5rem 1rem;
            border-radius: 6px;
            font-family: 'JetBrains Mono', monospace;
            font-size: 0.8rem;
            letter-spacing: 0.5px;
            margin-top: 1rem;
            position: relative;
            z-index: 1;
        }
        
        .content-type {
            font-size: 1rem;
            color: #94a3b8;
            margin-top: 0.5rem;
            position: relative;
            z-index: 1;
        }
        
        .data-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(220px, 1fr));
            gap: 1rem;
            margin: 2rem 0;
        }
        
        .data-card {
            background: #1e293b;
            border: 1px solid #334155;
            border-radius: 8px;
            padding: 1.5rem;
            text-align: center;
            position: relative;
            overflow: hidden;
            transition: transform 0.2s ease, border-color 0.2s ease;
        }
        
        .data-card:hover {
            transform: translateY(-2px);
            border-color: #22d3ee;
        }
        
        .data-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 2px;
            background: linear-gradient(90deg, #22d3ee, #a855f7, #10b981, #f59e0b);
            background-size: 300% 100%;
            animation: borderFlow 3s ease infinite;
        }
        
        @keyframes borderFlow {
            0% { background-position: 0% 50%; }
            50% { background-position: 100% 50%; }
            100% { background-position: 0% 50%; }
        }
        
        .data-icon {
            font-family: 'JetBrains Mono', monospace;
            font-size: 1.5rem;
            color: #22d3ee;
            margin-bottom: 0.5rem;
            display: block;
        }
        
        .data-label {
            font-family: 'JetBrains Mono', monospace;
            font-size: 0.7rem;
            color: #64748b;
            text-transform: uppercase;
            letter-spacing: 1px;
            margin-bottom: 0.5rem;
        }
        
        .data-value {
            font-size: 1.2rem;
            font-weight: 600;
            color: #f1f5f9;
        }
        
        .main-content {
            background: #1e293b;
            border: 1px solid #334155;
            border-radius: 12px;
            padding: 3rem;
            margin: 2rem 0;
            color: #f1f5f9;
        }
        
        h2 {
            font-size: 2rem;
            color: #22d3ee;
            margin-top: 2.5rem;
            margin-bottom: 1rem;
            font-weight: 600;
            position: relative;
            padding-bottom: 0.5rem;
        }
        
        h2::after {
            content: '';
            position: absolute;
            bottom: 0;
            left: 0;
            width: 60px;
            height: 2px;
            background: linear-gradient(90deg, #22d3ee, #a855f7);
        }
        
        h3 {
            font-size: 1.5rem;
            color: #a855f7;
            margin-top: 2rem;
            margin-bottom: 0.75rem;
            font-weight: 600;
        }
        
        h4 {
            font-size: 1.25rem;
            color: #10b981;
            margin-top: 1.5rem;
            margin-bottom: 0.5rem;
            font-weight: 600;
        }
        
        .code-block {
            background: #0f172a;
            border: 1px solid #334155;
            border-radius: 6px;
            padding: 1.5rem;
            font-family: 'JetBrains Mono', monospace;
            font-size: 0.9rem;
            color: #e2e8f0;
            margin: 1.5rem 0;
            overflow-x: auto;
        }
        
        .formula-box {
            background: rgba(16, 185, 129, 0.1);
            border: 1px solid rgba(16, 185, 129, 0.3);
            border-radius: 6px;
            padding: 1.5rem;
            margin: 1.5rem 0;
            text-align: center;
            font-family: 'JetBrains Mono', monospace;
        }
        
        .experiment-note {
            background: rgba(245, 158, 11, 0.1);
            border: 1px solid rgba(245, 158, 11, 0.3);
            border-radius: 6px;
            padding: 1.5rem;
            margin: 1.5rem 0;
        }
        
        .theory-box {
            background: rgba(168, 85, 247, 0.1);
            border: 1px solid rgba(168, 85, 247, 0.3);
            border-radius: 6px;
            padding: 1.5rem;
            margin: 1.5rem 0;
        }
        
        .footer {
            background: #0f172a;
            border: 1px solid #334155;
            color: #94a3b8;
            text-align: center;
            padding: 2rem;
            border-radius: 12px;
            margin-top: 3rem;
            font-family: 'JetBrains Mono', monospace;
            font-size: 0.8rem;
        }
        
        @media print {
            body { background: white; color: black; }
            .stem-header { background: #1e293b !important; color: white !important; -webkit-print-color-adjust: exact; }
            .main-content { background: white !important; color: black !important; border: 1px solid #ccc; }
            .footer { background: #1e293b !important; color: white !important; -webkit-print-color-adjust: exact; }
        }
    </style>
</head>
<body>
    <header class="stem-header">
        <h1>{{TITLE}}</h1>
        <div class="tech-badge">STEM.edu</div>
        <div class="content-type">{{CONTENT_TYPE}}</div>
    </header>

    <div class="data-grid">
        <div class="data-card">
            <span class="data-icon">⏱</span>
            <div class="data-label">Duration</div>
            <div class="data-value">{{DURATION}}</div>
        </div>
        <div class="data-card">
            <span class="data-icon">📊</span>
            <div class="data-label">Complexity</div>
            <div class="data-value">{{DIFFICULTY}}</div>
        </div>
        <div class="data-card">
            <span class="data-icon">📝</span>
            <div class="data-label">Content</div>
            <div class="data-value">{{WORD_COUNT}} words</div>
        </div>
        <div class="data-card">
            <span class="data-icon">🚀</span>
            <div class="data-label">Generated</div>
            <div class="data-value">{{GENERATED_AT}}</div>
        </div>
    </div>

    <main class="main-content">
        {{MAIN_CONTENT}}
    </main>

    <footer class="footer">
        <p>// STEM Education Content Generated by Curriculum Curator<br>
        // Empowering the next generation of innovators • {{GENERATED_AT}}</p>
    </footer>
</body>
</html>"#.to_string()
    }

    fn get_instructor_template(&self) -> String {
        r#"<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{TITLE}}</title>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Merriweather:wght@300;400;700&family=Open+Sans:wght@300;400;600;700&display=swap');
        
        body {
            font-family: 'Open Sans', -apple-system, BlinkMacSystemFont, sans-serif;
            line-height: 1.7;
            max-width: 950px;
            margin: 0 auto;
            padding: 2rem;
            color: #2d3748;
            background: #f8f9fa;
        }
        
        .instructor-header {
            background: linear-gradient(135deg, #2c5282 0%, #2a4365 100%);
            color: white;
            padding: 3rem 2rem;
            text-align: center;
            border-radius: 10px;
            margin-bottom: 3rem;
            position: relative;
            box-shadow: 0 10px 25px rgba(44, 82, 130, 0.3);
        }
        
        .instructor-header::before {
            content: '📚';
            position: absolute;
            font-size: 8rem;
            opacity: 0.1;
            top: 50%;
            left: 20px;
            transform: translateY(-50%);
        }
        
        .instructor-header::after {
            content: '✏️';
            position: absolute;
            font-size: 6rem;
            opacity: 0.1;
            top: 20%;
            right: 20px;
            transform: rotate(15deg);
        }
        
        .instructor-header h1 {
            font-family: 'Merriweather', Georgia, serif;
            font-size: 2.6rem;
            margin: 0 0 0.5rem 0;
            font-weight: 700;
            position: relative;
            z-index: 1;
        }
        
        .instructor-badge {
            display: inline-block;
            background: rgba(255,255,255,0.15);
            padding: 0.75rem 1.5rem;
            border-radius: 25px;
            font-size: 0.9rem;
            letter-spacing: 0.5px;
            margin-top: 1rem;
            border: 1px solid rgba(255,255,255,0.2);
            position: relative;
            z-index: 1;
        }
        
        .content-type {
            font-size: 1.1rem;
            opacity: 0.9;
            margin-top: 0.5rem;
            font-weight: 400;
            position: relative;
            z-index: 1;
        }
        
        .teaching-dashboard {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 1.5rem;
            margin: 3rem 0;
        }
        
        .dashboard-card {
            background: white;
            padding: 2rem;
            border-radius: 10px;
            text-align: center;
            box-shadow: 0 4px 12px rgba(0,0,0,0.08);
            border-top: 4px solid #4299e1;
            transition: transform 0.2s ease, box-shadow 0.2s ease;
        }
        
        .dashboard-card:hover {
            transform: translateY(-3px);
            box-shadow: 0 8px 20px rgba(0,0,0,0.12);
        }
        
        .dashboard-card:nth-child(2) { border-top-color: #48bb78; }
        .dashboard-card:nth-child(3) { border-top-color: #ed8936; }
        .dashboard-card:nth-child(4) { border-top-color: #9f7aea; }
        
        .dashboard-icon {
            font-size: 2.5rem;
            margin-bottom: 1rem;
            display: block;
        }
        
        .dashboard-label {
            font-size: 0.8rem;
            color: #718096;
            text-transform: uppercase;
            letter-spacing: 1px;
            margin-bottom: 0.5rem;
            font-weight: 600;
        }
        
        .dashboard-value {
            font-size: 1.4rem;
            font-weight: 700;
            color: #2d3748;
        }
        
        .lesson-plan {
            background: white;
            border-radius: 10px;
            padding: 3rem;
            margin: 3rem 0;
            box-shadow: 0 4px 12px rgba(0,0,0,0.08);
            border-left: 6px solid #2c5282;
        }
        
        .section-divider {
            display: flex;
            align-items: center;
            margin: 3rem 0 2rem 0;
        }
        
        .section-divider::before,
        .section-divider::after {
            content: '';
            flex: 1;
            height: 2px;
            background: linear-gradient(90deg, transparent, #cbd5e0, transparent);
        }
        
        .section-title {
            font-family: 'Merriweather', Georgia, serif;
            font-size: 1.3rem;
            color: #2c5282;
            font-weight: 700;
            margin: 0 2rem;
            white-space: nowrap;
        }
        
        h2 {
            font-family: 'Merriweather', Georgia, serif;
            font-size: 2.2rem;
            color: #2c5282;
            margin-top: 3rem;
            margin-bottom: 1.5rem;
            font-weight: 700;
            position: relative;
            padding-left: 1.5rem;
        }
        
        h2::before {
            content: '';
            position: absolute;
            left: 0;
            top: 0.3rem;
            width: 4px;
            height: 2rem;
            background: linear-gradient(180deg, #4299e1, #2c5282);
            border-radius: 2px;
        }
        
        h3 {
            font-family: 'Merriweather', Georgia, serif;
            font-size: 1.6rem;
            color: #2a4365;
            margin-top: 2.5rem;
            margin-bottom: 1rem;
            font-weight: 600;
        }
        
        h4 {
            font-size: 1.3rem;
            color: #4a5568;
            margin-top: 2rem;
            margin-bottom: 0.75rem;
            font-weight: 600;
        }
        
        .teaching-tip {
            background: #e6fffa;
            border: 1px solid #81e6d9;
            border-left: 4px solid #38b2ac;
            padding: 1.5rem;
            border-radius: 6px;
            margin: 2rem 0;
        }
        
        .teaching-tip::before {
            content: '💡 Teaching Tip: ';
            font-weight: 700;
            color: #2c7a7b;
        }
        
        .time-allocation {
            background: #fef5e7;
            border: 1px solid #f6ad55;
            border-left: 4px solid #ed8936;
            padding: 1.5rem;
            border-radius: 6px;
            margin: 2rem 0;
        }
        
        .assessment-note {
            background: #ebf8ff;
            border: 1px solid #90cdf4;
            border-left: 4px solid #4299e1;
            padding: 1.5rem;
            border-radius: 6px;
            margin: 2rem 0;
        }
        
        .materials-list {
            background: #f0fff4;
            border: 1px solid #9ae6b4;
            border-left: 4px solid #48bb78;
            padding: 1.5rem;
            border-radius: 6px;
            margin: 2rem 0;
        }
        
        .footer {
            background: #2c5282;
            color: white;
            text-align: center;
            padding: 2.5rem;
            border-radius: 10px;
            margin-top: 4rem;
            font-size: 0.95rem;
        }
        
        .quick-reference {
            background: #f7fafc;
            border: 2px dashed #cbd5e0;
            border-radius: 8px;
            padding: 2rem;
            margin: 2rem 0;
            text-align: center;
        }
        
        @media print {
            body { background: white; }
            .instructor-header { background: #2c5282 !important; -webkit-print-color-adjust: exact; }
            .footer { background: #2c5282 !important; -webkit-print-color-adjust: exact; }
            .dashboard-card { break-inside: avoid; }
        }
    </style>
</head>
<body>
    <header class="instructor-header">
        <h1>{{TITLE}}</h1>
        <div class="instructor-badge">Instructor's Teaching Guide</div>
        <div class="content-type">{{CONTENT_TYPE}}</div>
    </header>

    <div class="teaching-dashboard">
        <div class="dashboard-card">
            <span class="dashboard-icon">⏰</span>
            <div class="dashboard-label">Class Duration</div>
            <div class="dashboard-value">{{DURATION}}</div>
        </div>
        <div class="dashboard-card">
            <span class="dashboard-icon">📈</span>
            <div class="dashboard-label">Difficulty Level</div>
            <div class="dashboard-value">{{DIFFICULTY}}</div>
        </div>
        <div class="dashboard-card">
            <span class="dashboard-icon">📄</span>
            <div class="dashboard-label">Content Volume</div>
            <div class="dashboard-value">{{WORD_COUNT}} words</div>
        </div>
        <div class="dashboard-card">
            <span class="dashboard-icon">📅</span>
            <div class="dashboard-label">Last Updated</div>
            <div class="dashboard-value">{{GENERATED_AT}}</div>
        </div>
    </div>

    <div class="quick-reference">
        <h3>🎯 Quick Reference for Instructors</h3>
        <p>This material has been specifically designed for educational delivery. Look for teaching tips, time allocations, and assessment notes throughout the content.</p>
    </div>

    <main class="lesson-plan">
        {{MAIN_CONTENT}}
    </main>

    <footer class="footer">
        <p>📚 Professional Teaching Material Generated by Curriculum Curator</p>
        <p>Designed for Educational Excellence • {{GENERATED_AT}}</p>
    </footer>
</body>
</html>"#.to_string()
    }

    fn format_content_type(&self, content_type: &crate::content::ContentType) -> String {
        match content_type {
            crate::content::ContentType::Slides => "📊 Presentation Slides".to_string(),
            crate::content::ContentType::InstructorNotes => "📝 Instructor Notes".to_string(),
            crate::content::ContentType::Worksheet => "📋 Worksheet".to_string(),
            crate::content::ContentType::Quiz => "❓ Quiz".to_string(),
            crate::content::ContentType::ActivityGuide => "🎯 Activity Guide".to_string(),
        }
    }

    fn format_content_body(&self, content: &str, content_type: &crate::content::ContentType) -> Result<String> {
        // Convert markdown-like content to HTML
        match content_type {
            crate::content::ContentType::Slides => self.format_slides_html(content),
            crate::content::ContentType::Quiz => self.format_quiz_html(content),
            crate::content::ContentType::Worksheet => self.format_worksheet_html(content),
            crate::content::ContentType::InstructorNotes => self.format_instructor_notes_html(content),
            crate::content::ContentType::ActivityGuide => self.format_activity_guide_html(content),
        }
    }

    fn format_slides_html(&self, content: &str) -> Result<String> {
        let mut html = String::new();
        let slides: Vec<&str> = content.split("---SLIDE---").collect();
        let mut slide_count = 0;
        
        for slide in slides.iter() {
            if slide.trim().is_empty() {
                continue;
            }
            
            slide_count += 1;
            html.push_str(&format!("<div class=\"slide-section\">\n"));
            html.push_str(&format!("<h3>Slide {}</h3>\n", slide_count));
            
            // Process slide content
            let slide_content = slide.trim();
            if slide_content.contains("SPEAKER_NOTES:") {
                let parts: Vec<&str> = slide_content.split("SPEAKER_NOTES:").collect();
                if parts.len() > 1 {
                    html.push_str("<div class=\"slide-content\">\n");
                    html.push_str(&self.markdown_to_html(parts[0].trim()));
                    html.push_str("</div>\n");
                    
                    html.push_str("<div class=\"speaker-notes\">\n");
                    html.push_str("<h4>Speaker Notes</h4>\n");
                    html.push_str("<blockquote>\n");
                    html.push_str(&self.markdown_to_html(parts[1].trim()));
                    html.push_str("</blockquote>\n");
                    html.push_str("</div>\n");
                }
            } else {
                html.push_str("<div class=\"slide-content\">\n");
                html.push_str(&self.markdown_to_html(slide_content));
                html.push_str("</div>\n");
            }
            
            html.push_str("</div>\n\n");
        }
        
        Ok(html)
    }

    fn format_quiz_html(&self, content: &str) -> Result<String> {
        let mut html = String::new();
        let questions: Vec<&str> = content.split("---QUESTION---").collect();
        
        html.push_str("<div class=\"quiz-container\">\n");
        
        for (i, question) in questions.iter().enumerate() {
            if question.trim().is_empty() {
                continue;
            }
            
            html.push_str(&format!("<div class=\"question-block\">\n"));
            html.push_str(&format!("<h3>Question {}</h3>\n", i + 1));
            
            let lines: Vec<&str> = question.trim().lines().collect();
            for line in lines {
                if line.starts_with("Q:") {
                    html.push_str(&format!("<p class=\"question-text\"><strong>Question:</strong> {}</p>\n", &line[2..].trim()));
                } else if line.starts_with("A)") || line.starts_with("B)") || line.starts_with("C)") || line.starts_with("D)") {
                    html.push_str(&format!("<div class=\"answer-option\">{}</div>\n", line.trim()));
                } else if line.starts_with("ANSWER:") {
                    html.push_str(&format!("<p class=\"correct-answer\"><strong>Correct Answer:</strong> {}</p>\n", &line[7..].trim()));
                } else if line.starts_with("EXPLANATION:") {
                    html.push_str(&format!("<p class=\"explanation\"><strong>Explanation:</strong> {}</p>\n", &line[12..].trim()));
                } else if !line.trim().is_empty() {
                    html.push_str(&format!("<p>{}</p>\n", line.trim()));
                }
            }
            html.push_str("</div>\n\n");
        }
        
        html.push_str("</div>\n");
        Ok(html)
    }

    fn format_worksheet_html(&self, content: &str) -> Result<String> {
        let mut html = String::new();
        let sections: Vec<&str> = content.split("---SECTION---").collect();
        
        html.push_str("<div class=\"worksheet-container\">\n");
        
        for (i, section) in sections.iter().enumerate() {
            if section.trim().is_empty() {
                continue;
            }
            
            if i > 0 {
                html.push_str(&format!("<div class=\"worksheet-section\">\n"));
                html.push_str(&format!("<h3>Section {}</h3>\n", i));
            }
            
            let lines: Vec<&str> = section.trim().lines().collect();
            for line in lines {
                if line.starts_with("EXERCISE:") {
                    html.push_str("<div class=\"exercise\">\n");
                    html.push_str(&format!("<h4>Exercise</h4>\n<p>{}</p>\n", &line[9..].trim()));
                    html.push_str("</div>\n");
                } else if line.starts_with("ANSWER_SPACE:") {
                    let space_size = line[13..].trim().parse::<usize>().unwrap_or(3);
                    html.push_str("<div class=\"answer-space\">\n");
                    html.push_str("<strong>Answer:</strong><br>\n");
                    for _ in 0..space_size {
                        html.push_str("<div class=\"answer-line\">_".repeat(80).as_str());
                        html.push_str("</div>\n");
                    }
                    html.push_str("</div>\n");
                } else if !line.trim().is_empty() {
                    html.push_str(&format!("<p>{}</p>\n", line.trim()));
                }
            }
            
            if i > 0 {
                html.push_str("</div>\n\n");
            }
        }
        
        html.push_str("</div>\n");
        Ok(html)
    }

    fn format_instructor_notes_html(&self, content: &str) -> Result<String> {
        let mut html = String::new();
        let lines: Vec<&str> = content.lines().collect();
        
        html.push_str("<div class=\"instructor-notes\">\n");
        
        for line in lines {
            if line.starts_with("TIMING:") {
                html.push_str(&format!("<div class=\"timing-section\">\n<h3>⏰ Timing</h3>\n<p>{}</p>\n</div>\n", &line[7..].trim()));
            } else if line.starts_with("OBJECTIVES:") {
                html.push_str("<div class=\"objectives-section\">\n<h3>🎯 Learning Objectives</h3>\n<ul>\n");
            } else if line.starts_with("PREPARATION:") {
                html.push_str("</ul>\n</div>\n<div class=\"preparation-section\">\n<h3>📋 Preparation</h3>\n");
            } else if line.starts_with("KEY_POINTS:") {
                html.push_str("</div>\n<div class=\"key-points-section\">\n<h3>🔑 Key Points</h3>\n<ul>\n");
            } else if line.starts_with("ACTIVITIES:") {
                html.push_str("</ul>\n</div>\n<div class=\"activities-section\">\n<h3>🎯 Activities</h3>\n");
            } else if line.starts_with("ASSESSMENT:") {
                html.push_str("</div>\n<div class=\"assessment-section\">\n<h3>✅ Assessment</h3>\n");
            } else if line.starts_with("NOTES:") {
                html.push_str("</div>\n<div class=\"notes-section\">\n<h3>📝 Additional Notes</h3>\n");
            } else if !line.trim().is_empty() {
                if line.trim().starts_with("-") || line.trim().starts_with("*") {
                    html.push_str(&format!("<li>{}</li>\n", &line.trim()[1..].trim()));
                } else {
                    html.push_str(&format!("<p>{}</p>\n", line.trim()));
                }
            }
        }
        
        html.push_str("</div>\n</div>\n");
        Ok(html)
    }

    fn format_activity_guide_html(&self, content: &str) -> Result<String> {
        let mut html = String::new();
        let activities: Vec<&str> = content.split("---ACTIVITY---").collect();
        
        html.push_str("<div class=\"activity-guide\">\n");
        
        for (i, activity) in activities.iter().enumerate() {
            if activity.trim().is_empty() {
                continue;
            }
            
            html.push_str(&format!("<div class=\"activity-block\">\n"));
            html.push_str(&format!("<h3>Activity {}</h3>\n", i + 1));
            
            let lines: Vec<&str> = activity.trim().lines().collect();
            for line in lines {
                if line.starts_with("TITLE:") {
                    html.push_str(&format!("<h4>{}</h4>\n", &line[6..].trim()));
                } else if line.starts_with("DURATION:") {
                    html.push_str(&format!("<p class=\"duration\"><strong>Duration:</strong> {}</p>\n", &line[9..].trim()));
                } else if line.starts_with("MATERIALS:") {
                    html.push_str("<div class=\"materials\">\n<strong>Materials:</strong>\n<ul>\n");
                } else if line.starts_with("INSTRUCTIONS:") {
                    html.push_str("</ul>\n</div>\n<div class=\"instructions\">\n<strong>Instructions:</strong>\n");
                } else if line.starts_with("DEBRIEF:") {
                    html.push_str("</div>\n<div class=\"debrief\">\n<strong>Debrief Questions:</strong>\n");
                } else if !line.trim().is_empty() {
                    if line.starts_with("- ") || line.starts_with("* ") || line.starts_with("1. ") {
                        html.push_str(&format!("<li>{}</li>\n", &line.trim()[2..].trim()));
                    } else {
                        html.push_str(&format!("<p>{}</p>\n", line.trim()));
                    }
                }
            }
            html.push_str("</div>\n</div>\n\n");
        }
        
        html.push_str("</div>\n");
        Ok(html)
    }

    fn markdown_to_html(&self, markdown: &str) -> String {
        // Basic markdown to HTML conversion
        let mut html = markdown.to_string();
        
        // Headers
        html = html.replace("### ", "<h3>").replace("\n", "</h3>\n");
        html = html.replace("## ", "<h2>").replace("</h3>\n", "</h2>\n");
        html = html.replace("# ", "<h1>").replace("</h2>\n", "</h1>\n");
        
        // Bold and italic
        html = regex::Regex::new(r"\*\*(.*?)\*\*").unwrap().replace_all(&html, "<strong>$1</strong>").to_string();
        html = regex::Regex::new(r"\*(.*?)\*").unwrap().replace_all(&html, "<em>$1</em>").to_string();
        
        // Line breaks
        html = html.replace("\n", "<br>\n");
        
        html
    }

    fn create_combined_html(&self, contents: &[GeneratedContent], options: &ExportOptions) -> Result<String> {
        let template_name = options.template_name.as_deref();
        let template = self.get_template(template_name)?;
        let mut html = template.clone();

        // Apply branding customization
        if let Some(branding) = &options.branding_options {
            html = self.apply_branding(&html, branding)?;
        }

        // Replace main template variables
        html = html.replace("{{TITLE}}", "Curriculum Content Export");
        html = html.replace("{{CONTENT_TYPE}}", "Multi-Format Curriculum");
        html = html.replace("{{GENERATED_AT}}", &Utc::now().format("%Y-%m-%d %H:%M:%S UTC").to_string());
        html = html.replace("{{DURATION}}", &format!("{} total", 
            contents.iter()
                .map(|c| c.metadata.estimated_duration.as_str())
                .collect::<Vec<_>>()
                .join(", ")));
        html = html.replace("{{DIFFICULTY}}", "Mixed");
        html = html.replace("{{WORD_COUNT}}", &contents.iter()
            .map(|c| c.metadata.word_count)
            .sum::<usize>()
            .to_string());

        // Create combined content
        let mut combined_content = String::new();
        
        // Add table of contents
        combined_content.push_str("<div class=\"table-of-contents\">\n");
        combined_content.push_str("<h2>Table of Contents</h2>\n<ol>\n");
        for (i, content) in contents.iter().enumerate() {
            combined_content.push_str(&format!(
                "<li><a href=\"#content-{}\">{} ({})</a></li>\n",
                i + 1,
                content.title,
                self.format_content_type(&content.content_type)
            ));
        }
        combined_content.push_str("</ol>\n</div>\n\n<hr>\n\n");

        // Add each content section
        for (i, content) in contents.iter().enumerate() {
            if i > 0 {
                combined_content.push_str("<hr>\n\n");
            }
            
            combined_content.push_str(&format!("<div id=\"content-{}\" class=\"content-section\">\n", i + 1));
            combined_content.push_str(&format!("<h2>{}</h2>\n", content.title));
            combined_content.push_str(&format!("<p class=\"content-meta\"><strong>Type:</strong> {} | <strong>Duration:</strong> {} | <strong>Difficulty:</strong> {} | <strong>Words:</strong> {}</p>\n", 
                self.format_content_type(&content.content_type),
                content.metadata.estimated_duration,
                content.metadata.difficulty_level,
                content.metadata.word_count
            ));
            
            let content_html = self.format_content_body(&content.content, &content.content_type)
                .context(format!("Failed to convert {} to HTML", content.title))?;
            combined_content.push_str(&content_html);
            combined_content.push_str("</div>\n\n");
        }

        // Add export information if metadata is included
        if options.include_metadata {
            combined_content.push_str("<hr>\n\n");
            combined_content.push_str("<div class=\"export-info\">\n");
            combined_content.push_str("<h2>Export Information</h2>\n");
            combined_content.push_str(&format!("<ul>\n"));
            combined_content.push_str(&format!("<li><strong>Export Format:</strong> HTML</li>\n"));
            combined_content.push_str(&format!("<li><strong>Template:</strong> {}</li>\n", template_name.unwrap_or("default")));
            combined_content.push_str(&format!("<li><strong>Total Content Items:</strong> {}</li>\n", contents.len()));
            combined_content.push_str(&format!("<li><strong>Total Word Count:</strong> {} words</li>\n", 
                contents.iter().map(|c| c.metadata.word_count).sum::<usize>()));
            combined_content.push_str(&format!("<li><strong>Export Path:</strong> {}</li>\n", options.output_path.display()));
            combined_content.push_str("</ul>\n</div>\n");
        }

        html = html.replace("{{MAIN_CONTENT}}", &combined_content);

        // Apply institution name if provided
        if let Some(branding) = &options.branding_options {
            if let Some(institution) = &branding.institution_name {
                html = html.replace("Generated by Curriculum Curator", 
                    &format!("Generated by Curriculum Curator for {}", institution));
            }
        }

        Ok(html)
    }
}

#[async_trait::async_trait]
impl FormatConverter for HtmlConverter {
    fn supported_format(&self) -> ExportFormat {
        ExportFormat::Html
    }

    async fn convert(&self, contents: &[GeneratedContent], options: &ExportOptions) -> Result<ExportResult> {
        // Generate the combined HTML content
        let html_content = self.create_combined_html(contents, options)
            .context("Failed to create combined HTML document")?;

        // Ensure the output directory exists
        if let Some(parent) = options.output_path.parent() {
            fs::create_dir_all(parent)
                .context("Failed to create output directory")?;
        }

        // Write the HTML file
        fs::write(&options.output_path, &html_content)
            .context("Failed to write HTML file")?;

        // Get file size
        let file_size = fs::metadata(&options.output_path)
            .map(|m| m.len())
            .unwrap_or(0);

        Ok(ExportResult {
            success: true,
            output_path: options.output_path.clone(),
            file_size: Some(file_size),
            error_message: None,
        })
    }
}

#[cfg(test)]
mod tests {
    use super::*;
    use crate::content::{ContentType, generator::ContentMetadata};

    fn create_test_content() -> GeneratedContent {
        GeneratedContent {
            content_type: ContentType::Slides,
            title: "Test Lesson".to_string(),
            content: "---SLIDE---\n# Introduction\nThis is slide 1\n---SLIDE---\n# Main Content\nThis is slide 2".to_string(),
            metadata: ContentMetadata {
                word_count: 15,
                estimated_duration: "30 minutes".to_string(),
                difficulty_level: "Intermediate".to_string(),
            },
        }
    }

    #[tokio::test]
    async fn test_html_conversion() {
        let converter = HtmlConverter::new();
        let content = create_test_content();
        
        let result = converter.content_to_html(&content, None, None);
        assert!(result.is_ok());
        
        let html = result.unwrap();
        assert!(html.contains("<title>Test Lesson</title>"));
        assert!(html.contains("📊 Presentation Slides"));
        assert!(html.contains("Slide 1"));
        assert!(html.contains("Slide 2"));
    }

    #[tokio::test]
    async fn test_template_selection() {
        let converter = HtmlConverter::new();
        
        let professional = converter.get_template(Some("professional")).unwrap();
        assert!(professional.contains("Georgia"));
        
        let academic = converter.get_template(Some("academic")).unwrap();
        assert!(academic.contains("Times New Roman"));
        
        let minimal = converter.get_template(Some("minimal")).unwrap();
        assert!(minimal.contains("system-ui"));
        
        // Test new professional educational templates
        let university = converter.get_template(Some("university")).unwrap();
        assert!(university.contains("University Course Material"));
        assert!(university.contains("Crimson Text"));
        
        let corporate = converter.get_template(Some("corporate")).unwrap();
        assert!(corporate.contains("Professional Development Training"));
        assert!(corporate.contains("Inter"));
        
        let k12 = converter.get_template(Some("k12")).unwrap();
        assert!(k12.contains("K-12 Learning Material"));
        assert!(k12.contains("Comic Neue"));
        
        let medical = converter.get_template(Some("medical")).unwrap();
        assert!(medical.contains("Medical Education Content"));
        assert!(medical.contains("EDUCATIONAL USE ONLY"));
        
        let stem = converter.get_template(Some("stem")).unwrap();
        assert!(stem.contains("STEM.edu"));
        assert!(stem.contains("JetBrains Mono"));
        
        let instructor = converter.get_template(Some("instructor")).unwrap();
        assert!(instructor.contains("Instructor's Teaching Guide"));
        assert!(instructor.contains("Teaching Tip"));
    }

    #[tokio::test]
    async fn test_full_html_export() {
        let converter = HtmlConverter::new();
        let contents = vec![create_test_content()];
        
        let temp_dir = std::env::temp_dir();
        let output_path = temp_dir.join("test_export.html");
        
        let options = ExportOptions {
            format: ExportFormat::Html,
            output_path: output_path.clone(),
            template_name: Some("professional".to_string()),
            include_metadata: true,
        };

        let result = converter.convert(&contents, &options).await;
        assert!(result.is_ok());
        
        let export_result = result.unwrap();
        assert!(export_result.success);
        assert!(export_result.file_size.is_some());
        assert!(export_result.file_size.unwrap() > 0);
        
        // Cleanup
        if output_path.exists() {
            let _ = fs::remove_file(output_path);
        }
    }
}